# PersistentVolumeClaim for MySQL data persistence
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvcclaim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-root-password
          - name: MYSQL_DATABASE
            value: "messaging_db"
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-password
        ports:
          - containerPort: 3306
        volumeMounts:
          - name: mysql-storage
            mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvcclaim
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:
    app: mysql
  clusterIP: None
---
# Django App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-app-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: messaging-app
  template:
    metadata:
      labels:
        app: messaging-app
    spec:
      containers:
      - name: messaging-app
        image: messaging-app:latest
        imagePullPolicy: Never
        ports:
          - containerPort: 8000
        env:
          - name: DATABASE_ENGINE
            value: "django.db.backends.mysql"
          - name: MYSQL_DB
            value: "messaging_db"
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-password
          - name: DATABASE_HOST
            value: "mysql"
          - name: DATABASE_PORT
            value: "3306"
---
# Django App Service (internal access)
apiVersion: v1
kind: Service
metadata:
  name: messaging-app-service
spec:
  type: ClusterIP
  selector:
    app: messaging-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000